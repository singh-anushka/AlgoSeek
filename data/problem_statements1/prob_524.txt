
 
Problem description.
You are given two sequences of N elements P and Q. You have to partition them where the cost of making a partition from index L to R is cost = min(P[L...N])*max(Q[1...R]). Find the minimum and the maximum cost of partitioning the two sequences into exactly K partitions. Remember, the partitions of the two sequences must be the same, you cannot make different partitions for P and Q.
Input
Input description.
The first line of the input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains a two integers N and K denoting the number of elements in the sequences and the number of partitions to be made. Then follows N lines, each line containing two integers, the first element corresponding the P and the second integer corresponding to Q.

Output
For each test case, output a single line containing two integers denoting minimum and maximum cost.
Constraints


1 ≤ T ≤ 10
1 ≤ K ≤ N ≤ 1000
-105 ≤ Pi, Qi ≤ 105


Subtasks

Subtask #1(9 points):

1 ≤ N ≤ 1000
K = 2

Subtask #2(16 points):

1 ≤ K ≤ N ≤ 1000
1 ≤ Pi, Qi ≤ 105

Subtask #3(27 points):

1 ≤ K ≤ N ≤ 100

Subtask #4(48 points):

Original Constraints


Example
Input:
3
5 1
1 1
2 2
3 3
4 4
5 5

5 5
1 1
2 2
3 3
4 4
5 5

5 2
1 1
2 2
3 3
4 4
5 5

Output:
5 5
55 55
11 29





Explanation

Example case 1.
There is only one way to partition the elements and that is to keep everything in the same partition, i.e, [1, 5]. The cost is min(P[1..N])*max(Q[1..N]) = 1*5 = 5.
This is both the maximum and the minimum possible.


